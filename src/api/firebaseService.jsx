// firebaseService.js
import { database } from "../firebase";
import { ref, set, get, update, remove, onValue } from "firebase/database";
import bcrypt from "bcryptjs";

// üìù ƒê·ªçc d·ªØ li·ªáu (Items)
export const readItems = (callback, name) => {
  const ItemsRef = ref(database, name);
  onValue(
    ItemsRef,
    (snapshot) => {
      if (typeof callback === "function") {
        callback(snapshot.exists() ? snapshot.val() : {});
      } else {
        console.error("L·ªói: callback kh√¥ng ph·∫£i l√† m·ªôt h√†m!");
      }
    },
    { onlyOnce: true } // Ch·ªâ ƒë·ªçc m·ªôt l·∫ßn, tr√°nh l·∫∑p v√¥ h·∫°n
  );
};
export const getProductById = async (productId) => {
  try {
    const productRef = ref(database, `products/${productId}`);
    const snapshot = await get(productRef);

    return snapshot.exists() ? snapshot.val() : null;
  } catch (error) {
    console.error("L·ªói l·∫•y s·∫£n ph·∫©m:", error.message);
    return null;
  }
};

// ‚ûï Th√™m
export const addItem = async (id, Item, name) => {
  const itemRef = ref(database, `${name}/${id}`);
  const snapshot = await get(itemRef);

  if (snapshot.exists()) {
    throw new Error(`ID "${id}" ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn ID kh√°c.`);
  }

  return set(itemRef, Item);
};
// ‚úèÔ∏è S·ª≠a
export const updateItem = (id, updatedItem, name) => {
  return update(ref(database, `${name}/${id}`), updatedItem);
};

// üóëÔ∏è X√≥a
export const deleteItem = (id, name) => {
  return remove(ref(database, `${name}/${id}`));
};

// üîπ 1Ô∏è‚É£ H√†m ƒêƒÉng k√Ω
export const registerUser = async (phone, password, name, address) => {
  try {
    // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ch∆∞a
    const phoneRef = ref(database, `phoneToUserId/${phone}`);
    const phoneSnapshot = await get(phoneRef);

    if (phoneSnapshot.exists()) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!");
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = bcrypt.hashSync(password, 10);
    const userId = Date.now().toString(); // T·∫°o userId duy nh·∫•t

    // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng theo userId
    await set(ref(database, `users/${userId}`), {
      userId,
      phone,
      name,
      address,
      image: "", // ·∫¢nh m·∫∑c ƒë·ªãnh
      password: hashedPassword,
    });

    // L∆∞u √°nh x·∫° phone -> userId
    await set(phoneRef, { userId });

    return { success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", userId };
  } catch (error) {
    return { success: false, message: error.message };
  }
};
// üîπ 2Ô∏è‚É£ H√†m ƒêƒÉng nh·∫≠p
export const loginUser = async (phone, password) => {
  try {
    // L·∫•y userId t·ª´ s·ªë ƒëi·ªán tho·∫°i
    const phoneRef = ref(database, `phoneToUserId/${phone}`);
    const phoneSnapshot = await get(phoneRef);

    if (!phoneSnapshot.exists()) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒëƒÉng k√Ω!");
    }

    const { userId } = phoneSnapshot.val();

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng b·∫±ng userId
    const userRef = ref(database, `users/${userId}`);
    const userSnapshot = await get(userRef);

    if (!userSnapshot.exists()) {
      throw new Error("D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
    }

    const userData = userSnapshot.val();
    const isMatch = bcrypt.compareSync(password, userData.password);

    if (!isMatch) {
      throw new Error("Sai m·∫≠t kh·∫©u!");
    }

    return { success: true, user: userData };
  } catch (error) {
    return { success: false, message: error.message };
  }
};

// üîπ 3Ô∏è‚É£ H√†m C·∫≠p nh·∫≠t th√¥ng tin User
export const updateUser = async (userId, newData) => {
  try {
    const userRef = ref(database, `users/${userId}`);
    const snapshot = await get(userRef);

    if (!snapshot.exists()) {
      throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
    }

    const oldData = snapshot.val();
    const updatedPhone = newData.phone || oldData.phone;

    // N·∫øu c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i, ki·ªÉm tra xem s·ªë m·ªõi ƒë√£ t·ªìn t·∫°i ch∆∞a
    if (updatedPhone !== oldData.phone) {
      const newPhoneRef = ref(database, `phoneToUserId/${updatedPhone}`);
      const phoneSnapshot = await get(newPhoneRef);

      if (phoneSnapshot.exists()) {
        throw new Error("S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
      }

      // C·∫≠p nh·∫≠t √°nh x·∫° phoneToUserId
      await remove(ref(database, `phoneToUserId/${oldData.phone}`));
      await set(newPhoneRef, { userId });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin user
    await update(userRef, {
      name: newData.name || oldData.name,
      phone: updatedPhone,
      address: newData.address || oldData.address,
    });

    return { success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!" };
  } catch (error) {
    return { success: false, message: error.message };
  }
};
export const getUser = async (phone, setUser) => {
  try {
    // L·∫•y userId t·ª´ phone
    const phoneRef = ref(database, `phoneToUserId/${phone}`);
    const phoneSnapshot = await get(phoneRef);

    if (!phoneSnapshot.exists()) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒëƒÉng k√Ω!");
    }

    const { userId } = phoneSnapshot.val();

    // L·∫•y th√¥ng tin user t·ª´ userId
    const userRef = ref(database, `users/${userId}`);
    const userSnapshot = await get(userRef);

    if (userSnapshot.exists()) {
      setUser(userSnapshot.val());
    } else {
      throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!");
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin user:", error.message);
  }
};
